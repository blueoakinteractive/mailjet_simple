<?php
/**
 * @file
 * Provides a simple MailJet subscription implementation.
 */

/**
 * Implements hook_menu().
 */
function mailjet_simple_menu() {
  $items = [];

  $items['admin/config/services/mailjet-simple'] = array(
    'title' => 'Mailjet Simple',
    'description' => t('Configure Mailjet Simple Module Settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailjet_simple_admin_settings_form'),
    'access arguments' => array('administer mailjet simple'),
    'file' => 'includes/mailjet_simple.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/mailjet-simple/settings'] = array(
    'title' => 'Mailjet Simple Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mailjet_simple_permission() {
  return array(
    'administer mailjet simple' => array(
      'title' => t('administer mailjet simple'),
      'description' => t('Access the Mailjet Simple configuration options.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function mailjet_simple_block_info() {
  return [
    'mailjet_simple_newsletter' => [
      'info' => t('Mailjet Simple Newsletter Block'),
      'cache' => DRUPAL_NO_CACHE,
    ]
  ];
}

/**
 * Implements hook_block_view().
 */
function mailjet_simple_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'mailjet_simple_newsletter':
      $form = drupal_get_form('mailjet_simple_newsletter_block_form');
      $block = [
        'content' => $form,
      ];
      break;
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailjet_simple_form_user_register_form_alter(&$form, &$form_state) {
  // Add the Mailjet simple registration fields to the form.
  mailjet_simple_get_subscription_form($form);

  // Default to opt-in on the user registration page.
  $form['mailjet_simple']['contact_lists']['#default_value'] = drupal_map_assoc(array_keys($form['mailjet_simple']['contact_lists']['#options']));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailjet_simple_form_user_profile_form_alter(&$form, &$form_state) {
  // Only add the mailjet subscription form when the mail form
  // element exists. Profile2 puts this form element in "account".
  if (!empty($form['mail']) || !empty($form['account']['mail'])) {
    // Add the Mailjet simple registration fields to the form.
    mailjet_simple_get_subscription_form($form);
  }
}

/**
 * Block form callback.
 */
function mailjet_simple_newsletter_block_form($form, &$form_state) {
  global $user;

  if (!empty($user->uid)) {
    // Add fields that the submit handler expects.
    $form['#user'] = $user;
    $form['mail'] = [
      '#type' => 'value',
      '#value' => $user->mail,
    ];

    mailjet_simple_get_subscription_form($form);

    $form['actions'] += [
      'submit' => [
        '#type' => 'submit',
        '#value' => t('Save'),
      ],
    ];
  }

  return $form;
}

/**
 * @param $form array
 *   The form array to append the Mailjet signup options to.
 */
function mailjet_simple_get_subscription_form(&$form) {
  if (!empty($form['#user']->uid)) {
    $account = $form['#user'];
  }
  else {
    $account = menu_get_object('user', 1);
  }

  if (!empty($account)) {
    $lists = mailjet_simple_get_list_ids_by_mail($account->mail);
  }

  $options = mailjet_simple_options_list();

  if (!empty($options)) {
    $form['mailjet_simple'] = array(
      '#type' => 'fieldset',
      '#title' => t('Newsletters'),
      '#description' => t('Select the newsletter(s) to which you would like to be subscribed.'),
      '#tree' => TRUE,
      '#weight' => 100,
    );

    $form['mailjet_simple']['contact_lists'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => !empty($lists) ? $lists : [],
    );

    $form['#submit'][] = 'mailjet_simple_user_register_form_submit';

    if (empty($form['actions']['#weight'])) {
      $form['actions']['#weight'] = 101;
    }
  }
}

/**
 * Submit callback for the user registration page.
 */
function mailjet_simple_user_register_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['mailjet_simple']['contact_lists'])) {
    $api = mailjet_simple_get_api();
    $values = array(
      'Email' => $form_state['values']['mail'],
    );

    $lists = [];
    // Build an array of lists to subscribe the user to.
    foreach ($form_state['values']['mailjet_simple']['contact_lists'] as $list_id => $selected) {
      $lists[] = [
        'ListId' => $list_id,
        'Action' => !empty($selected) ? 'addforce' : 'unsub',
      ];
    }

    // Allow other modules to update the values array.
    drupal_alter('mailjet_simple_update_contact_submit', $values, $lists, $form_state);

    // Create the contact object in Mailjet.
    $contact = $api->updateContact($values, $lists);
  }
}

/**
 * Returns an array of list ids that the email address is subscribed to.
 *
 * @param $mail string
 *   A valid email address
 *
 * @return array
 */
function mailjet_simple_get_list_ids_by_mail($mail) {
  $list_ids = [];

  $mailjet = mailjet_simple_get_api();

  if ($mailjet) {
    $lists = $mailjet->getListsByEmail($mail);
    foreach ($lists as $list) {
      if ($list['IsActive'] && !$list['IsUnsub']) {
        $list_ids[$list['ListID']] = $list['ListID'];
      }
    }
  }

  return $list_ids;
}

/**
 * Returns an options array of available contact lists.
 *
 * @param $api boolean
 *    TRUE to fetch the available list from the API.
 *    FALSE to fetch the available list from settings.
 *
 * @return array
 */
function mailjet_simple_options_list($api = FALSE) {
  $options = [];

  // Fetch the available lists from the API.
  if ($api) {
    $mailjet = mailjet_simple_get_api();

    if ($mailjet) {
      $lists = $mailjet->getContactLists();
      foreach ($lists as $list) {
        $options[$list['ID']] = check_plain($list['Name']);
      }
    }
  }

  // Fetch the enabled lists from settings.
  else {
    $settings = variable_get('mailjet_simple_settings', mailjet_simple_settings_defaults());
    foreach ($settings['enabled_lists'] as $list_id => $enabled_list) {
      if (empty($enabled_list)) {
        unset($settings['lists'][$list_id]);
      }
    }
    return $settings['lists'];
  }

  return $options;
}

/**
 * Bootstraps the MailJet API.
 *
 * @return \MailJetSimple
 */
function mailjet_simple_get_api() {
  $settings = variable_get('mailjet_simple_settings');
  try {
    return new MailJetSimple($settings['public_key'], $settings['private_key']);
  } catch (Exception $ex) {
    watchdog('mailjet_simple', t('Unable to bootstrap MailJet API'));
    return NULL;
  }
}

/**
 * Defines default settings array.
 */
function mailjet_simple_settings_defaults() {
  return [
    'public_key' => '',
    'private_key' => '',
    'lists' => [],
    'additional_settings' => array(
      'cancel_delete' => TRUE,
    ),
  ];
}

/**
 * Implements hook_user_delete().
 */
function mailjet_simple_user_delete($account) {
  $settings = variable_get('mailjet_simple_settings', mailjet_simple_settings_defaults());

  // If $account exists and $settings['additional_settings']['cancel_delete']
  // is true perform unsubscribe routine.
  if (!empty($account) && $settings['additional_settings']['cancel_delete']) {
    mailjet_simple_unsubscribe_all_lists($account);
  }
}

/**
 * Implements hook_user_cancel().
 */
function mailjet_simple_user_cancel($edit, $account, $method) {
  $settings = variable_get('mailjet_simple_settings', mailjet_simple_settings_defaults());

  // If $account exists and $settings['additional_settings']['cancel_delete']
  // is true perform unsubscribe routine.
  if (!empty($account) && $settings['additional_settings']['cancel_delete']) {
    mailjet_simple_unsubscribe_all_lists($account);
  }
}

/**
 * Helper function to unsubscribe a user from all Mailjet lists.
 *
 * @param $account
 *    User account object to perform unsubscribe routine on.
 */
function mailjet_simple_unsubscribe_all_lists($account) {
  if (!empty($account)) {
    $api = mailjet_simple_get_api();
    $active_subscription_lists = mailjet_simple_get_list_ids_by_mail($account->mail);
    $lists = [];
    $values = array(
      'Email' => $account->mail,
    );

    // If the user has active subscriptions force unsubscribe.
    if (!empty($active_subscription_lists)) {
      foreach($active_subscription_lists as $list_id => $selected) {
        $lists[] = [
          'ListId' => $list_id,
          'Action' => 'unsub',
        ];

        // Unsubscribe the contact from all lists in Mailjet.
        $contact = $api->updateContact($values, $lists);
      }
    }
  }
}

/**
 * Helper function to create a new campaign for a Mailjet list.
 *
 * @param integer $list_id
 *    List ID to associate with the campaign.
 *
 * @param array $body
 *    Message to used for campaign creation.
 *
 * @return array $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_create_campaign($list_id, $body) {
  if (!empty($list_id) && !empty($body)) {
    $api = mailjet_simple_get_api();
    $result = $api->createCampaign($list_id, $body);
    return $result;
  }
}

/**
 * Helper function to create a new campaign for a Mailjet list.
 *
 * @param array $campaign_id
 *    Campaign ID we will be adding copy to.
 *
 * @param array $body
 *    Message to used for campaign creation.
 *
 * @return string $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_create_campaign_content($campaign_id, $body) {
  if (!empty($campaign_id) && !empty($body)) {
    $api = mailjet_simple_get_api();
    $result = $api->createCampaignContent($campaign_id, $body);
    return $result;
  }
}

/**
 * Helper function to create a new campaign for a Mailjet list.
 *
 * @param array $campaign_id
 *    Campaign ID we will be adding copy to.
 *
 * @return string $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_send_campaign($campaign_id) {
  if (!empty($campaign_id)) {
    $api = mailjet_simple_get_api();
    $result = $api->sendCampaign($campaign_id);
    return $result;
  }
}

/**
 * Helper function to prepare a new campaign for a Mailjet list.
 *
 * @param integer $list_id
 *    List ID to associate with the campaign.
 *
 * @param string $title
 *    Title to associate with the campaign.
 *
 * @param string $message
 *    Content to be posted as message on associated campaign.
 */
function mailjet_simple_prepare_campaign($list_id, $title, $message) {

  // Create Mailjet campaign.
  $body = mailjet_simple_scaffold_body(MAILJET_SIMPLE_NODE_CAMPAIGNS_NODE_CAMPAIGN_LISTS, $title, NULL, $body_type = 'createCampaign');
  $campaign = mailjet_simple_create_campaign(MAILJET_SIMPLE_NODE_CAMPAIGNS_NODE_CAMPAIGN_LISTS, $body);

  // Perform additional actions if campaign was created successfully.
  if (!empty($campaign[0]['ID'])) {
    $campaign_id = $campaign[0]['ID'];

    // Create Mailjet campaign content.
    $body = mailjet_simple_scaffold_body(MAILJET_SIMPLE_NODE_CAMPAIGNS_NODE_CAMPAIGN_LISTS, $title, $content = $message, $body_type = 'createCampaignContent');
    $campaign_content = mailjet_simple_create_campaign_content($campaign_id, $body);

    // Send Mailjet campaign;
    $campaign_send = mailjet_simple_send_campaign($campaign_id);
  }

}

/**
 * Helper function to the body for a Mailjet campaign.
 *
 * @param integer $list_id
 *    List ID to associate with the campaign.
 *
 * @param string $title
 *    Message title and subject.
 *
 * @param string $sender_name
 *    Message senders name. Defaults to site_name.
 *
 * @param string $sender_email
 *    Message senders email address. Defaults to site_mail.
 *
 * @param string $locale
 *    The message $locale. Defaults to en_US.
 *
 * @return array $body
 *    Returns the prepared body.
 */
function mailjet_simple_scaffold_body($list_id, $title, $content = NULL, $body_type = NULL, $sender_name = NULL, $sender_email = NULL, $locale = 'en_US') {
  // Default to site_name.
  if (empty($sender_name)) {
    $sender_name = variable_get('site_name', 'Example Site Name');
  }

  // Default to site_mail.
  if (empty($sender_email)) {
    $sender_email = variable_get('site_mail', 'example@example.com');
  }

  // Sanitize body content and create html / plain text variants.
  if (!empty($content)) {
    $content_html = check_markup($content);
    $content_plain = check_plain($content);
  }

  $body = [];

  // Build body depending on body_type.
  switch ($body_type) {
    case 'createCampaign':
      $body = [
        'Locale' => "$locale",
        'Sender' => "$sender_name",
        'SenderName' => "$sender_name",
        'SenderEmail' => "$sender_email",
        'Subject' => "$title",
        'ContactsListID' => "$list_id",
        'Title' => "$title",
      ];
      break;
    case 'createCampaignContent':
      $body = [
        'Html-part' => $content_html,
        'Text-part' => $content_plain
      ];
      break;
    default:
      $body = [];
  }

  return($body);
}
