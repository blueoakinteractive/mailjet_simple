<?php

/**
 * Implements hook_menu().
 */
function mailjet_simple_node_campaigns_menu() {
  $items = [];

  $items['admin/config/services/mailjet-simple/node-campaigns'] = array(
    'title' => 'Node Campaign Settings',
    'description' => t('Configure Mailjet Simple Node Campaigns Module Settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailjet_simple_node_campaigns_admin_settings_form'),
    'access arguments' => array('administer mailjet simple'),
    'file' => 'includes/mailjet_simple_node_campaigns.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function mailjet_simple_node_campaigns_entity_info_alter(&$entity_info) {
  // Creates new Node Campaign view mode which will allow administrators
  // to create new variables easily via the Drupal UI.
  $entity_info['node']['view modes']['mailjet_simple_node_campaigns'] = array(
    'label' => t('Node Campaign'),
    'custom settings' => FALSE,
  );
}

/**
 * Returns an options array of available templates.
 *
 * @return array
 */
function mailjet_simple_node_campaigns_template_options_list(){
  // TODO: need to cache template list to reduce API requests.
  // This will currently only be useful on node save however
  // we may have more instances where this would be useful.
  $options = [];
  $templates = mailjet_simple_node_campaigns_get_templates();

  if (!empty($templates)){
    foreach ($templates as $template) {
      $options[$template['ID']] = t($template['Name']);
    }
  }

  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailjet_simple_node_campaigns_form_node_form_alter(&$form, $form_state) {
  // Load admin configured settings variables.
  $settings = variable_get('mailjet_simple_node_campaigns_settings');
  $content_type = $form['type']['#value'];

  // Alter node form configured to be used as a node campaign.
  if (!empty($settings[$content_type]['node_campaign_enabled'])) {

    $form['mailjet_simple_node_campaigns_settings'] = array(
      '#type' => 'fieldset',
      '#access' => TRUE,
      '#title' => t('Mailjet: Node Campaign Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('mailjet-simple-node-campaigns-settings'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'mailjet_simple_node_campaigns') . '/mailjet-simple-node-campaigns-node-form.js')
      ),
      '#weight' => 89,
    );

    $form['mailjet_simple_node_campaigns_settings']['create_and_send'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create and Send Campaign on Save?'),
    );

    $form['mailjet_simple_node_campaigns_settings']['node_campaign_settings_overrides'] = array(
      '#type' => 'fieldset',
      '#title' => t('Override Node Campaign Setting Defaults'),
      '#description' => t('Update the field data below to override the Node Campaign Setting Defaults for this node campaign.'),
      '#tree' => TRUE,
    );

    $form['mailjet_simple_node_campaigns_settings']['node_campaign_settings_overrides']['node_campaign_list'] = array(
      '#type' => 'select',
      '#title' => t('Select a List'),
      '#options' => mailjet_simple_options_list(),
      '#default_value' => !empty($settings[$content_type]['node_campaign_list']) ? $settings[$content_type]['node_campaign_list'] : 0,
      '#description' => t('Select the list that you would like to tie to this node campaign.'),
    );

    $templates = array(0 => t('- None -')) + mailjet_simple_node_campaigns_template_options_list();

    $form['mailjet_simple_node_campaigns_settings']['node_campaign_settings_overrides']['node_campaign_template'] = array(
      '#type' => 'select',
      '#title' => t('Select a Template'),
      '#options' => $templates,
      '#default_value' => !empty($settings[$content_type]['node_campaign_template']) ? $settings[$content_type]['node_campaign_template'] : 0,
      '#description' => t('Select a template that will be associated with this node campaign if you would like your email styled.'),
    );

    $form['mailjet_simple_node_campaigns_settings']['node_campaign_settings_overrides']['node_campaign_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Specify a From/Reply Email Address'),
      '#default_value' => !empty($settings[$content_type]['node_campaign_email']) ? $settings[$content_type]['node_campaign_email'] : variable_get('site_mail', 'example@example.com'),
      '#description' => t('Specify the email address you would like to use as your from/reply address for this campaign. Note: This email address needs to be configured in your Mailjet account otherwise the campaign will not be sent. See <a href="@url" target="_blank">Mailjet documentation</a> for more information.', array('@url' => 'https://www.mailjet.com/support/am-i-limited-to-one-email-sending-address,96.htm')),
    );

    $form['#validate'][] = 'mailjet_simple_node_campaigns_form_node_form_validate';
    $form['#submit'][] = 'mailjet_simple_node_campaigns_form_node_form_submit';
  }
}

/**
 * Form validation handler.
 */
function mailjet_simple_node_campaigns_form_node_form_validate($form, &$form_state) {
  // TODO: add error messages if needed.
}

/**
 * Form submit handler.
 */
function mailjet_simple_node_campaigns_form_node_form_submit($form, &$form_state) {
  // If node is marked to create and send a campaign prepare a campaign draft.
  if (!empty($form_state['values']['create_and_send'])) {
    // Prepare Mailjet campaign (ie: create and send).
    $node = $form_state['node'];
    $list_id = $form_state['values']['node_campaign_settings_overrides']['node_campaign_list'];
    $title = $form_state['values']['title'];
    $message = !empty($form_state['values']['body'][LANGUAGE_NONE][0]['value']) ? $form_state['values']['body'][LANGUAGE_NONE][0]['value'] : NULL;
    $template_id = $form_state['values']['node_campaign_settings_overrides']['node_campaign_template'];

    // Additional "Optional" arguments.
    $arguments = array();

    // Specify From/Reply address if one is specified.
    if (!empty($form_state['values']['node_campaign_settings_overrides']['node_campaign_email'])) {
      $arguments['SenderEmail'] = check_plain($form_state['values']['node_campaign_settings_overrides']['node_campaign_email']);
    }

    // Specify the text format to be used when sanitizing the message.
    $advanced_settings = mailjet_simple_node_campaigns_get_setting('advanced_settings');
    $text_format = !(empty($advanced_settings['text_format'])) ? $advanced_settings['text_format'] : NULL;

    // Send the node campaign.
    mailjet_simple_node_campaigns_prepare_campaign_draft($list_id, $title, $message, $template_id, $text_format, $node, $arguments);
  }
}

/**
 * Helper function that returns the specified node campaign setting.
 */
function mailjet_simple_node_campaigns_get_setting($setting = NULL) {
  // Load all node campaign settings.
  $settings = variable_get('mailjet_simple_node_campaigns_settings');

  // If a setting is requested in this function call return it.
  if (!empty($setting)) {
    return !empty($settings[$setting]) ? $settings[$setting] : FALSE;
  }

  return $settings;
}


/**
 * Helper function to create a new campaign for a Mailjet list.
 *
 * @param array $arguments
 *    Message arguments used for campaign creation.
 *
 * @return array $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_node_campaigns_create_campaign_draft($arguments) {
  if (!empty($arguments)) {
    $api = mailjet_simple_node_campaigns_get_api();
    $result = $api->createCampaignDraft($arguments);
    return $result;
  }
}

/**
 * Helper function to create a new campaign for a Mailjet list.
 *
 * @param integer $campaign_id
 *    Campaign ID we will be adding copy to.
 *
 * @param array $arguments
 *    Message to used for campaign creation.
 *
 * @return string $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_node_campaigns_create_campaign_draft_detail_content($campaign_id, $arguments) {
  if (!empty($campaign_id) && !empty($arguments)) {
    $api = mailjet_simple_node_campaigns_get_api();
    $result = $api->createCampaignDraftDetailContent($campaign_id, $arguments);
    return $result;
  }
}

/**
 * Helper function to create a new campaign for a Mailjet list.
 *
 * @param integer $campaign_id
 *    Campaign ID we will be adding copy to.
 *
 * @return string $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_node_campaigns_send_campaign_draft($campaign_id) {
  if (!empty($campaign_id)) {
    $api = mailjet_simple_node_campaigns_get_api();
    $result = $api->sendCampaignDraft($campaign_id);
    return $result;
  }
}

/**
 * Helper function to load templates.
 *
 * @param integer $template_id
 *    The id of the template to be loaded.
 *
 * @return string $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_node_campaigns_get_templates($template_id = NULL) {
  $api = mailjet_simple_node_campaigns_get_api();
  $result = $api->getTemplates($template_id);
  return $result;
}

/**
 * Helper function to load template detail.
 *
 * @param integer $template_id
 *    The id of the template to be loaded.
 *
 * @return string $result
 *    Returns Mailjet API call result.
 */
function mailjet_simple_node_campaigns_get_template_detail($template_id) {
  $api = mailjet_simple_node_campaigns_get_api();
  $result = $api->getTemplateDetail($template_id);
  return $result;
}

/**
 * Helper function to prepare a new campaign for a Mailjet list.
 *
 * @param integer $list_id
 *    List ID to associate with the campaign.
 *
 * @param string $title
 *    Title to associate with the campaign.
 *
 * @param string $message
 *    Content to be posted as message on associated campaign.
 *
 * @param string $template_id
 *    The ID fo the template to be associated with the campaign.
 *
 * @param string $text_format
 *    The text format to be used to sanitize $mailjet_template_vars values.
 *
 * @param object $node
 *    The node object used to build the campaign. Used for alter context.
 *
 * @param array $arguments
 *    An array of additional arguments used to prepare the campaign.
 *    https://dev.mailjet.com/email-api/v3/campaigndraft/
 *
 *    Example:
 *    $arguments = array(
 *      'Locale' => "en_US",
 *      'Sender' => "Sender Name",
 *      'SenderName' => "Sender Name",
 *      'SenderEmail' => "sender@email.address",
 *    );
 */
function mailjet_simple_node_campaigns_prepare_campaign_draft($list_id, $title, $message, $template_id = NULL, $text_format = NULL, $node = NULL, array $arguments) {
  // Define Mailjet campaign defaults.
  $argument_defaults = array(
    'ContactsListID' => "$list_id",
    'Subject' => "$title",
    'Title' => "$title",
  );

  // Overriding existing arguments and adding new ones.
  $arguments_create_campaign = array_merge($argument_defaults, $arguments);

  $campaign = mailjet_simple_node_campaigns_create_campaign_draft($arguments_create_campaign);

  // Perform additional actions if campaign was created successfully.
  if (!empty($campaign[0]['ID'])) {
    $campaign_id = $campaign[0]['ID'];

    // If a template id was specified, loop over the template
    // variables and do a string replacement on against the
    // template markup and plain text.
    if (!empty($template_id)) {

      // Define the base template replacement array.
      $mailjet_template_vars = [
        '{{ MAILJET_SIMPLE_NODE_CAMPAIGNS_TITLE }}' => $title,
        '{{ MAILJET_SIMPLE_NODE_CAMPAIGNS_BODY }}' => $message,
      ];

      if (!empty($node)) {
        // If the Mailjet Simple Node Campaigns Node View is enabled
        // for this node type create additional template vars.
        $view_modes = field_view_mode_settings('node', $node->type);
        if (!empty($view_modes['mailjet_simple_node_campaigns']['custom_settings'])) {
          $node_campaign_view = node_view($node, $view_mode = 'mailjet_simple_node_campaigns', $langcode = NULL);
          $node_campaign_variables = element_get_visible_children($node_campaign_view);
          foreach ($node_campaign_variables as $node_campaign_variable) {
            $mailjet_template_vars['{{ MAILJET_SIMPLE_NODE_CAMPAIGNS_' . strtoupper($node_campaign_variable) . ' }}'] = render($node_campaign_view[$node_campaign_variable]);
          }
        }

        // Create new template link variables dependent on node object.
        GLOBAL $base_url;
        $mailjet_template_vars['{{ MAILJET_SIMPLE_NODE_CAMPAIGNS_URL }}'] = url('node/' . $node->nid, array('absolute' => TRUE));
        $mailjet_template_vars['{{ MAILJET_SIMPLE_NODE_CAMPAIGNS_LINK }}'] = l(t('Read More'), 'node/' . $node->nid, array('absolute' => TRUE, 'attributes' => array('class' => array('button'))));
      }

      // Build a context array to pass to the alter method.
      $context = [
        'list_id' => $list_id,
        'title' => $title,
        'message' => $message,
        'template_id' => $template_id,
        'node' => $node,
      ];

      // Allow other modules to alter the template vars for replacement.
      drupal_alter('mailjet_simple_node_campaigns_campaign_template_vars', $mailjet_template_vars, $context);

      // Fetch the template detail.
      $detail = mailjet_simple_node_campaigns_get_template_detail($template_id);

      // Loop over each template variable and perform a string replace.
      if (!empty($detail[0]) && !empty($mailjet_template_vars)) {
        $html_message = $detail[0]['Html-part'];
        $text_message = $detail[0]['Text-part'];
        foreach ($mailjet_template_vars as $key => $val) {
          $html_message = str_replace($key, check_markup($val, $text_format), $html_message);
          $text_message = str_replace($key, check_plain($val), $text_message);
        }
      }
    }

    // Create Mailjet campaign content.
    $arguments_create_campaign_content = array(
      'Html-part' => !empty($html_message) ? $html_message : check_markup($message, $text_format),
      'Text-part' => !empty($text_message) ? $text_message : check_plain($message),
    );

    // Create the draft and send the campaign.
    mailjet_simple_node_campaigns_create_campaign_draft_detail_content($campaign_id, $arguments_create_campaign_content);
    mailjet_simple_node_campaigns_send_campaign_draft($campaign_id);
  }
}

/**
 * Bootstraps the MailJet API.
 *
 * @return \MailJetSimple
 */
function mailjet_simple_node_campaigns_get_api() {
  $settings = variable_get('mailjet_simple_settings');
  try {
    return new MailJetSimpleNodeCampaigns($settings['public_key'], $settings['private_key']);
  } catch (Exception $ex) {
    watchdog('mailjet_simple_node_campaigns', t('Unable to bootstrap MailJet API'));
    return NULL;
  }
}
